name: Build and Release

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      platform:
        description: 'Build Platform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - windows
          - macos
          - linux
  push:
    tags: ['v*']     # Only trigger on version tags

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Generate package-lock.json
        run: npm i --package-lock-only
        
      - name: Set version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          # Ensure version starts with 'v'
          if [[ $VERSION != v* ]]; then
            VERSION="v$VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        
      - name: Set build matrix
        id: set-matrix
        run: |
          if [ "${{ github.event.inputs.platform }}" = "windows" ]; then
            echo "matrix={\"include\":[{\"os\":\"windows-latest\",\"target\":\"nsis,portable\"}]}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.platform }}" = "macos" ]; then
            echo "matrix={\"include\":[{\"os\":\"macos-latest\",\"target\":\"dmg,zip\"}]}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.platform }}" = "linux" ]; then
            echo "matrix={\"include\":[{\"os\":\"ubuntu-latest\",\"target\":\"AppImage,deb,rpm\"}]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"include\":[{\"os\":\"windows-latest\",\"target\":\"nsis,portable\"},{\"os\":\"macos-latest\",\"target\":\"dmg,zip\"},{\"os\":\"ubuntu-latest\",\"target\":\"AppImage,deb,rpm\"}]}" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g @electron-forge/cli

      - name: Build Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          github_token: ${{ secrets.github_token }}
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
          args: --${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'macos-latest' && 'mac' || 'linux' }} -c.extraMetadata.version=${{ needs.prepare.outputs.version }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: |
            dist
            dist/latest*.yml
            dist/*-latest.yml
          if-no-files-found: error

  release:
    needs: [prepare, build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            artifacts/**/*
            artifacts/**/latest*.yml
            artifacts/**/*-latest.yml
          name: "Release v${{ needs.prepare.outputs.version }}"
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}